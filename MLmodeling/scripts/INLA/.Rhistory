library(h2o)
?h2o.xgboost
q_rf_LUR
library(APMtools)
q_rf_LUR
rf_Lasso_LUR
prediction_with_pp_La()
prediction_with_pp_La
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path=paste0('global_crossvali',"/"),
echo=F, warning=FALSE, message=FALSE, dev = "png", include = T)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE , repos='http://cran.muenster.r-project.org')
sapply(pkg, require, character.only = TRUE)
}
packages <- c( "devtools", "dplyr","data.table" , "ggplot2" , "RColorBrewer", "xgboost",  "glmnet", "ranger", "randomForest","tidyr" ,"tibble","stargazer", "sf", "CAST", "caret", "quantregForest", "pdp", "h2o", "dismo")
ipak(packages)
install_github("mengluchu/APMtools")
library(APMtools)
ls("package:APMtools")
resolution =100 # resolution of grid
nboot = 12  # number of bootstraps
y_var = "mean_value"
prestring =  "road|nightlight|population|temp|wind|trop|indu|elev|radi"
varstring = paste(prestring,y_var,sep="|")
mergedall = read.csv("https://raw.githubusercontent.com/mengluchu/uncertainty/master/data_vis_exp/DENL17_uc.csv")
if (resolution ==100)
{
mergedall = mergedall%>%dplyr::select(-c(industry_25,industry_50,road_class_1_25,road_class_1_50,road_class_2_25,road_class_2_50,   road_class_3_25,road_class_3_50))
}
merged = mergedall%>%dplyr::select(matches(varstring))%>% na.omit() # there is actually no na in this file, but for now RF and LA doesnt deal with missing data, leave out for quick examination
names(merged)
locations_sf = st_as_sf(mergedall, coords = c("Longitude","Latitude"), crs=4642)
xgb_crossvali =  function(n,df, y_var,typecrossvali = "crossvalispatial",coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size = floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test<- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
}
training = seq_len(nrow(df))[-test]
xgboost_LUR(df, y_varname= y_var, training=training, test=test, grepstring =varstring,  max_depth =6, gamma=5, eta =0.007, nrounds =1000, xgb_lambda = 2, xgb_alpha = 0, subsample = 0.7 )
}
V2 = lapply(1:nboot, df = merged, y_var = y_var,xgb_crossvali)
V2 = data.frame(XGB = rowMeans(data.frame(V2)))
V2
rf_crossvali =  function(n,df, y_var, coordi = c(mergedall$Longitude, mergedall$Latitude), typecrossvali = "crossvalispatial") {
smp_size <- floor(0.2 * nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test<- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
}
training = seq_len(nrow(df))[-test]
rf_LUR(df, numtrees =  1000, mtry = NULL, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf = lapply(1:nboot, df = merged, y_var = y_var,rf_crossvali)
Vrf = data.frame(RF = rowMeans(data.frame(Vrf)))
Vrf
#server: combine
LA_crossvali =  function(n,df, y_var,typecrossvali = "crossvalispatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2 * nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(c(coordi), ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
hist(prob_selection, n=500)
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
}
#plot(v)
training = seq_len(nrow(df))[-test]
tr = p[training,] %>%
sf::st_multipoint()
te = p[test,] %>%
st_multipoint()
p = ggplot()+geom_sf(data = te, color = "red")+geom_sf(data=tr)
#plot(p)
Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring, vis1 = F)
}
VLA = lapply(1:nboot, df = merged, y_var = y_var, LA_crossvali)
VLA = data.frame(LA = rowMeans(data.frame(VLA)))
VLA
q_rf_crossvali =  function(n,df, y_var,typecrossvali = "crossvalispatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = FALSE)
}
training = seq_len(nrow(df))[-test]
q_rf_LUR(df, numtrees =  1000, mtry = NULL,  y_varname= y_var, training=training, test=test, grepstring =varstring)}
qrf = lapply(1:nboot, df = merged, y_var = y_var, q_rf_crossvali )
qrf = data.frame(LA = rowMeans(data.frame(qrf)))
qrf
rf_la_crossvali =  function(n,df, y_var,typecrossvali = "crossvalispatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = FALSE)
}
training = seq_len(nrow(df))[-test]
rf_Lasso_LUR(df, numtrees =  1000, mtry = NULL,  y_varname= y_var, training=training, test=test, grepstring =varstring)
}
rfla= lapply(1:nboot, df = merged, y_var = y_var, q_rf_crossvali )
rfla = data.frame(LA = rowMeans(data.frame(rfla)))
rfla
rf_la_crossvali =  function(n,df, y_var,typecrossvali = "crossvalispatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = FALSE)
}
training = seq_len(nrow(df))[-test]
rf_Lasso_LUR(df, numtrees =  1000, mtry = NULL,  y_varname= y_var, training=training, test=test, grepstring =varstring)
}
rfla= lapply(1:nboot, df = merged, y_var = y_var, q_rf_crossvali )
rfla = data.frame(LA = rowMeans(data.frame(rfla)))
rfla
rfla= lapply(1:nboot, df = merged, y_var = y_var,rf_la_crossvali )
rfla= lapply(1:nboot, df = merged, y_var = y_var,rf_la_crossvali )
rfla = data.frame(LA = rowMeans(data.frame(rfla)))
rfla
LA_crossvali =  function(n,df, y_var,typecrossvali = "crossvalinotspatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2 * nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(c(coordi), ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
hist(prob_selection, n=500)
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
}
#plot(v)
training = seq_len(nrow(df))[-test]
tr = p[training,] %>%
sf::st_multipoint()
te = p[test,] %>%
st_multipoint()
p = ggplot()+geom_sf(data = te, color = "red")+geom_sf(data=tr)
#plot(p)
Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring, vis1 = F)
}
VLA = lapply(1:nboot, df = merged, y_var = y_var, LA_crossvali)
LA_crossvali =  function(n,df, y_var,typecrossvali = "crossvalinotspatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2 * nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(c(coordi), ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
hist(prob_selection, n=500)
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
}
#plot(v)
training = seq_len(nrow(df))[-test]
tr = p[training,] %>%
sf::st_multipoint()
te = p[test,] %>%
st_multipoint()
#p = ggplot()+geom_sf(data = te, color = "red")+geom_sf(data=tr)
#plot(p)
Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring, vis1 = F)
}
VLA = lapply(1:nboot, df = merged, y_var = y_var, LA_crossvali)
y_var
merged
LA_crossvali =  function(n,df, y_var,typecrossvali = "crossvalinotspatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2 * nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(c(coordi), ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
hist(prob_selection, n=500)
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
tr = p[training,] %>%  sf::st_multipoint()
te = p[test,] %>% sf::st_multipoint()
#p = ggplot()+geom_sf(data = te, color = "red")+geom_sf(data=tr)
#plot(p)
}
#plot(v)
training = seq_len(nrow(df))[-test]
#p = ggplot()+geom_sf(data = te, color = "red")+geom_sf(data=tr)
#plot(p)
Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring, vis1 = F)
}
VLA = lapply(1:nboot, df = merged, y_var = y_var, LA_crossvali)
VLA = data.frame(LA = rowMeans(data.frame(VLA)))
VLA
rf_crossvali =  function(n,df, y_var, coordi = c(mergedall$Longitude, mergedall$Latitude), typecrossvali = "crossvalinotspatial") {
smp_size <- floor(0.2 * nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test<- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
}
training = seq_len(nrow(df))[-test]
rf_LUR(df, numtrees =  1000, mtry = NULL, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf = lapply(1:nboot, df = merged, y_var = y_var,rf_crossvali)
Vrf = data.frame(RF = rowMeans(data.frame(Vrf)))
Vrf
xgb_crossvali =  function(n,df, y_var,typecrossvali = "crossvalinotspatial",coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size = floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test<- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = T)
}
training = seq_len(nrow(df))[-test]
xgboost_LUR(df, y_varname= y_var, training=training, test=test, grepstring =varstring,  max_depth =6, gamma=5, eta =0.007, nrounds =1000, xgb_lambda = 2, xgb_alpha = 0, subsample = 0.7 )
}
V2 = lapply(1:nboot, df = merged, y_var = y_var,xgb_crossvali)
V2 = data.frame(XGB = rowMeans(data.frame(V2)))
V2
q_rf_crossvali =  function(n,df, y_var,typecrossvali = "crossvalinotspatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = FALSE)
}
training = seq_len(nrow(df))[-test]
q_rf_LUR(df, numtrees =  1000, mtry = NULL,  y_varname= y_var, training=training, test=test, grepstring =varstring)}
qrf = lapply(1:nboot, df = merged, y_var = y_var, q_rf_crossvali )
qrf = data.frame(LA = rowMeans(data.frame(qrf)))
qrf
rf_la_crossvali =  function(n,df, y_var,typecrossvali = "crossvalinotspatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = FALSE)
}
training = seq_len(nrow(df))[-test]
rf_Lasso_LUR(df, numtrees =  1000, mtry = NULL,  y_varname= y_var, training=training, test=test, grepstring =varstring)
}
rfla= lapply(1:nboot, df = merged, y_var = y_var,rf_la_crossvali )
rfla = data.frame(LA = rowMeans(data.frame(rfla)))
rfla
df = data.frame(Lasso = VLA,RF = Vrf, XGB = V2 , RF_Lasso = rfla))
df = data.frame(Lasso = VLA,RF = Vrf, XGB = V2 , RF_Lasso = rfla)
stargazer(df,summary = F, digits = 2)
rf_la_crossvali =  function(n,df, y_var,typecrossvali = "crossvalinotspatial", coordi = c(mergedall$Longitude, mergedall$Latitude)) {
smp_size <- floor(0.2* nrow(df))
set.seed(n)
if(typecrossvali == "crossvalinotspatial"){
test <- sample(seq_len(nrow(df)), size = smp_size)
}
if(typecrossvali == "crossvalispatial"){
# The validation data needs to spatially represent the whole region where the prevalence is predicted
# We use locations of a spatially representative sample of the prediction surface
# To obtain a valid data set, X% of the observations are sampled without replacement where
# each observation has a probability of selection proportional to the area of the Voronoi polygon
# surrounding its location, that is, the area closest to the location relative to the surrounding points
p <- matrix(coordi, ncol = 2)
v <- dismo::voronoi(p) # extent?
prob_selection <- area(v)/sum(area(v))
test <- sample(seq_len(nrow(df)), size = smp_size, prob = prob_selection, replace = FALSE)
}
training = seq_len(nrow(df))[-test]
rf_Lasso_LUR(df, numtrees =  1000, mtry = NULL,  y_varname= y_var, training=training, test=test, grepstring =varstring)
}
rfla= lapply(1:nboot, df = merged, y_var = y_var,rf_la_crossvali )
rfla = data.frame(RFLA = rowMeans(data.frame(rfla)))
rfla
df = data.frame(Lasso = VLA,RF = Vrf, XGB = V2 , RF_Lasso = rfla)
stargazer(df,summary = F, digits = 2)
rfgamma_cv = function(n,df, y_var){
h2o.init()
set.seed(n)
smp_size <- floor(0.8 * nrow(df))
training <- sample(seq_len(nrow(df)), size = smp_size)
test = seq_len(nrow(df))[-training]
x_var = setdiff(names(merged), y_var) # predictor names
train_xy = df[training,]
test_xy = df[test,]
y_train = train_xy[, y_var]
y_test = test_xy[, y_var]
x_train = train_xy%>%dplyr::select(x_var)
x_test = test_xy%>%dplyr::select(x_var)
train_hex = as.h2o(train_xy)
test_hex = as.h2o(test_xy)
# model and predict on all the data
xgb  = h2o.xgboost(y = y_var, x= x_var, training_frame = train_hex ,ntrees =1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, distribution = "gamma" )
xgb_pre = as.data.frame(h2o.predict(object = xgb, newdata = test_hex))$predict
APMtools::error_matrix (validation = y_test, prediction = xgb_pre)
h2o.removeAll()
}
rg = lapply(1:nboot, df = merged, y_var = y_var, rfgamma_cv  )
rg = data.frame(LA = rowMeans(data.frame(rg)))
rg#gamma
n = 1
df = merged
h2o.init()
set.seed(n)
smp_size <- floor(0.8 * nrow(df))
training <- sample(seq_len(nrow(df)), size = smp_size)
test = seq_len(nrow(df))[-training]
x_var = setdiff(names(merged), y_var) # predictor names
train_xy = df[training,]
test_xy = df[test,]
y_train = train_xy[, y_var]
y_test = test_xy[, y_var]
x_train = train_xy%>%dplyr::select(x_var)
x_test = test_xy%>%dplyr::select(x_var)
train_hex = as.h2o(train_xy)
test_hex = as.h2o(test_xy)
# model and predict on all the data
xgb  = h2o.xgboost(y = y_var, x= x_var, training_frame = train_hex ,ntrees =1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, distribution = "gamma" )
xgb_pre = as.data.frame(h2o.predict(object = xgb, newdata = test_hex))$predict
xgb_pr
xgb_pre
APMtools::error_matrix (validation = y_test, prediction = xgb_pre)
h2o.removeAll()
APMtools::error_matrix (validation = y_test, prediction = xgb_pre)
rfgamma_cv = function(n,df, y_var){
h2o.init()
set.seed(n)
smp_size <- floor(0.8 * nrow(df))
training <- sample(seq_len(nrow(df)), size = smp_size)
test = seq_len(nrow(df))[-training]
x_var = setdiff(names(merged), y_var) # predictor names
train_xy = df[training,]
test_xy = df[test,]
y_train = train_xy[, y_var]
y_test = test_xy[, y_var]
x_train = train_xy%>%dplyr::select(x_var)
x_test = test_xy%>%dplyr::select(x_var)
train_hex = as.h2o(train_xy)
test_hex = as.h2o(test_xy)
# model and predict on all the data
xgb  = h2o.xgboost(y = y_var, x= x_var, training_frame = train_hex ,ntrees =1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, distribution = "gamma" )
xgb_pre = as.data.frame(h2o.predict(object = xgb, newdata = test_hex))$predict
h2o.removeAll()
APMtools::error_matrix (validation = y_test, prediction = xgb_pre)
}
rg = lapply(1:nboot, df = merged, y_var = y_var, rfgamma_cv  )
rg = data.frame(LA = rowMeans(data.frame(rg)))
rg#gamma
APMtools::error_matrix
rg = data.frame(XGB_GAMMA = rowMeans(data.frame(rg)))
rg#gamma
raster("/Users/menglu/Documents/GitHub/nijmegen/2020_05_nijmegen_25m")
raster("/Users/menglu/Documents/GitHub/nijmegen/2020_05_nijmegen_25m/elevation.map")
rfgamma_cv = function(n,df, y_var){
h2o.init()
set.seed(n)
smp_size <- floor(0.8 * nrow(df))
training <- sample(seq_len(nrow(df)), size = smp_size)
test = seq_len(nrow(df))[-training]
x_var = setdiff(names(merged), y_var) # predictor names
train_xy = df[training,]
test_xy = df[test,]
y_train = train_xy[, y_var]
y_test = test_xy[, y_var]
x_train = train_xy%>%dplyr::select(x_var)
x_test = test_xy%>%dplyr::select(x_var)
train_hex = as.h2o(train_xy)
test_hex = as.h2o(test_xy)
# model and predict on all the data
rf = h2o.randomForest(y = y_var, x= x_var, training_frame = train_hex, ntrees =1000, seed =1, distribution = "gamma" )
rf_pre = as.data.frame(h2o.predict(object = rf, newdata = test_hex))$predict
h2o.removeAll()
APMtools::error_matrix (validation = y_test, prediction = rf_pre)
}
rg = lapply(1:nboot, df = merged, y_var = y_var, rfgamma_cv  )
rg = data.frame(XGB_GAMMA = rowMeans(data.frame(rg)))
rg#gamma
a
rg
