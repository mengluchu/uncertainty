locations_sf
grid1%>%plot
stc
plot(stc)
stc
grid1%>%plot
grid1%>%plot
stc = st_join(st_sf(grid1), locations_sf,join=st_intersects )
stc
#plot(stc["grp"])
merged2 = na.omit(stc%>%dplyr::select(c(colnames(merged), grp)))
#plot(stc["grp"])
merged2 = na.omit(stc%>%dplyr::select(c(colnames(merged), grp)))
grid1 = st_make_grid(locations_sf, 1)
grid1%>%plot
stc = st_join(st_sf(grid1), locations_sf,join=st_intersects )
stc$grp = sapply(st_equals(stc), max)
#plot(stc["grp"])
merged2 = na.omit(stc%>%dplyr::select(c(colnames(merged), grp)))
indices = CreateSpacetimeFolds(merged2,
spacevar = "grp",
timevar = NA,
k = 10,
class = NA,
seed = 1
)
merged3 = merged2%>%dplyr::select(c(colnames(merged)))
merged
st_geometry(merged3) <- NULL
predic = merged3%>%dplyr::select(-y_var)
model_LLO = train(predic, merged3[,y_var],
method="rf", ntree = 1000, importance=TRUE,
trControl=trainControl(method="cv",
index = indices$index))
model_LLO
model_LLO
model_LLO$method
model_LLO$results
indices
stc$grp
ncol(merged2).3
ncol(merged2)/3
rfGrid <-  expand.grid(
n.trees = 2000,
mtry =20 )
merged3 = merged2%>%dplyr::select(c(colnames(merged)))
merged
st_geometry(merged3) <- NULL
predic = merged3%>%dplyr::select(-y_var)
model_LLO = train(predic, merged3[,y_var],
method="rf", ntree = 2000, importance=TRUE,
trControl=trainControl(method="cv",
index = indices$index),
tuneGrid = rfGrid)
rfGrid <-  expand.grid( mtry =20 )
merged3 = merged2%>%dplyr::select(c(colnames(merged)))
merged
st_geometry(merged3) <- NULL
predic = merged3%>%dplyr::select(-y_var)
model_LLO = train(predic, merged3[,y_var],
method="rf", ntree = 2000, importance=TRUE,
trControl=trainControl(method="cv",
index = indices$index),
tuneGrid = rfGrid)
model_LLO$results
merged2$grp
plot(stc["grp"])
merged2$grp
plot(stc["grp"])
merged2$grp
merged2$grp%>%unique()
plot(stc["grp"])
merged2$grp%>%unique()
plot(stc["grp"])
plot(stc)
stc
nrow(stc)
stc
stc%>%na.omit()
stc
plot(stc["grp"])
plot(stc)
st_make_grid
merged2$grp%>%unique()
c(colnames(merged))
xgb  = h2o.xgboost(training_frame = merged2,,ntrees = 1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, fold_column=grp)
m2 = as.h2o(merged2)
merged2
m2 = as.h2o(data.frame(merged2))
data.frame(merged2)
m2 = as.h2o(merged2%>%dplyr::select(c(colnames(merged), 'grp')))
merged2%>%dplyr::select(c(colnames(merged), 'grp'))
m2 = as.h2o(data.frame(merged2)%>%dplyr::select(c(colnames(merged), 'grp')))
names(m2)
xgb  = h2o.xgboost(training_frame = m2,,ntrees = 1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, fold_column=grp)
xgb  = h2o.xgboost(training_frame = m2,y = "mean_value",ntrees = 1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, fold_column=grp)
xgb  = h2o.xgboost(training_frame = m2,y = "mean_value",ntrees = 1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, fold_column="grp")
m2$grp = as.factor(m2$grp)
m2$grp
as.factor(m2$grp)
m2$grp = as.factors(m2$grp)
as.factor(m2$grp)
m2$grp
= as.factor(m2$grp)
as.factor(m2$grp)
str(m2)
m2 = data.frame(merged2)%>%dplyr::select(c(colnames(merged), 'grp'))
m2 = data.frame(merged2)%>%dplyr::select(c(colnames(merged), 'grp'))%>%mutate(grp = as.factor(grp))
m2
m2 = as.h2o(m2)
names(m2)
xgb  = h2o.xgboost(training_frame = m2,y = "mean_value",ntrees = 1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, fold_column="grp")
xgb
dim(xgb)
length(xgb)
nrow(xgb)
str(xgb)
xgb
xgb  =get_h2o_pred(xgb)
get_h2o_pred(xgb)
xgb@model$cross_validation_holdout_predictions_frame_id$name
xgb@model$cross_validation_holdout_predictions_frame_id$name
xgb@model$cross_validation_holdout_predictions_frame_id
xgb@model
xgb@model$cross_validation_fold_assignment_frame_id
xgb@model
str(xgb)
str(xgb@model$cross_validation_metrics)
str(xgb@model$cross_validation_metrics_summary)
xgb@model$cross_validation_metrics_summary
xgb@model$cross_validation_metrics_summary%>%as.numeric()
xgb@model$cross_validation_metrics_summary%>%data.frame()%>%as.numeric()
xgb@model$cross_validation_metrics_summary%>%data.frame()
xgb@model$cross_validation_metrics_summary%>%data.frame()%>%as.numeric()
xgb@model$cross_validation_metrics_summary%>%data.frame()[,2:]
xgbcv = xgb@model$cross_validation_metrics_summary%>%data.frame()
xgbcv[,2:]
xgbcv[2:]
str(xgbcv)
str(t(xgbcv))
xgb@model[["cross_validation_predictions"]]
xgb@model[["cross_validation_predictions"]]
xgb@model[["cross_validation_predictions"]]
xgb@model[["cross_validation_predictions"]]
xgbcv
xgbcv%?%dplyr::select(-sd, -mean)
xgbcv%>%dplyr::select(-sd, -mean)
xgbcv = xgb@model$cross_validation_metrics_summary%>%data.frame()%>%dplyr::select(-sd, -mean)
xgbcv
xgbcv["r2"]
xgbcv
str(xgbcv)
xgbcv
t(xgbcv)
as.numeric(t(xgbcv))
t(xgbcv)
apply(t(xgbcv), 2, as.numeric)
merged2
apply(t(xgbcv), 2, as.numeric)
merged2
merged2$grp%>%unique()
merged2 = na.omit(stc%>%dplyr::select(c(colnames(merged), grp)))
merged2
plot(stc)
stc
plot(stc)
stc
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv
xgbcv$grp = as.unique(grp)
xgbcv$grp = unique(grp)
xgbcv$grp = unique(merged2$grp)
xgbcv
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv = xgb@model$cross_validation_metrics_summary%>%data.frame()%>%dplyr::select(-sd, -mean)
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv['grp'] = unique(merged2$grp)
xgbcv
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv = xgb@model$cross_validation_metrics_summary%>%data.frame()%>%dplyr::select(-sd, -mean)
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv
xgb  = h2o.xgboost(training_frame = m2,y = "mean_value",ntrees = 1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, fold_column="grp", keep_cross_validation_fold_assignment= TRUE,)
xgbcv
xgbcv = xgb@model$cross_validation_metrics_summary%>%data.frame()%>%dplyr::select(-sd, -mean)
xgbcv
xgbcv
xgb
str(xgb)
xgb@model$cross_validation_fold_assignment_frame_id
xgb
h2o.cross_validation_fold_assignment(xgb)
xgbcvh2o.cross_validation_fold_assignment(xgb)
xgbcv = xgb@model$cross_validation_metrics_summary%>%data.frame()%>%dplyr::select(-sd, -mean)
xgbcv
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv
cbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
xgbcv
cbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
data.frame(xgbcv,h2o.cross_validation_fold_assignment(xgb))
cbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
h2o.cross_validation_fold_assignment(xgb)
h2o.cross_validation_fold_assignment(xgb)
h2o.cross_validation_fold_assignment(xgb)[1]
h2o.cross_validation_fold_assignment(xgb)[200]
length(h2o.cross_validation_fold_assignment(xgb) )
nrow(h2o.cross_validation_fold_assignment(xgb) )
nrow(h2o.cross_validation_fold_assignment(xgb) )
h2o.cross_validation_fold_assignment(xgb)
xgbcv
cbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
xgbcv
rbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
cbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
str(xgbcv)
class(xgbcv)
xgbcv = xgb@model$cross_validation_metrics_summary%>%as.data.frame()%>%dplyr::select(-sd, -mean)
xgbcv = apply(t(xgbcv), 2, as.numeric)
class(xgbcv)
xgbcv = xgb@model$cross_validation_metrics_summary%>%as.data.frame()%>%dplyr::select(-sd, -mean)
class(xgbcv)
str(xgbcv)
xgbcv = apply(t(xgbcv), 2, as.numeric)
str(xgbcv)
class(xgbcv)
xgbcv = as.data.frame(apply(t(xgbcv), 2, as.numeric))
class(xgbcv)
cbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
str(xgbcv)
xgbcv[1]
xgbcv[2]
rbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
cbind(xgbcv,h2o.cross_validation_fold_assignment(xgb))
data.frame(xgbcv,h2o.cross_validation_fold_assignment(xgb))
xgbcv[2]
xgbcv[2,]
xgbcv
xgbcv = as.data.frame(apply(t(xgbcv), 2, as.numeric))
xgbcv
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv
xgbcv = xgb@model$cross_validation_metrics_summary%>%as.data.frame()%>%dplyr::select(-sd, -mean)
xgbcv = apply(t(xgbcv), 2, as.numeric)
xgbcv
xgbcv[1,]
xgbcv[,1]
xgbcv[1,]
xgbcv[,1]
xgbcv[1,1]
xgbcv[1,]
xgbcv[1,1]
xgbcv[,1]
xgbcv[1,1]
xgbcv
xgbcv[1,]
xgbcv[,1]
xgbcv[,]
xgbcv[,4]
xgbcv[,2]
xgbcv[,]
xgbcv[,6]
xgbcv[,4]
plot(xgbcv[,4])
plot(xgbcv[,4], y lim = c(0,1))
plot(xgbcv[,4], ylim = c(0,1))
plot(xgbcv[,4], ylim = c(0,1), typ = "l")
h2o.cross_validation_fold_assignment(xgb)
h2o.cross_validation_fold_assignment(xgb)
xgbcv
grid1%>%plot
st_sf(grid1)
locations_sf
stc = st_join(st_sf(grid1), locations_sf,join=st_intersects )
stc
plot(stc)
stc
stc$geometry
unique(stc$geometry)
length(unique(stc$geometry))
length(unique(merged2$geometry))
unique(merged2$geometry)
plot(unique(merged2$geometry))
plot(sf::distinct(merged2$geometry))
plot(sf::distinct(merged))
plot(sf::distinct(merged2))
plot(distinct(merged2))
distinct(merged2)
m3 = distinct(merged2)
m3$r2 = xgbcv[,4]
xgbcv
m3$rmse= xgbcv[,6]
plot(m3)
plot(m3,key.pos = 4)
plot(m3['r2],key.pos = 4)
plot(m3['r2'],key.pos = 4)
plot(m3['r2'],key.pos = 4)
plot(m3['rmse'],key.pos = 4)
m3$r2 = ifelse(xgbcv[,4]<0, 0, xgbcv[,4] )
plot(m3['r2'],key.pos = 4)
plot(m3['rmse'],key.pos = 4)
plot(m3['r2'],key.pos = 4)
plot(m3['rmse'],key.pos = 4, add = T)
plot(m3['r2'],key.pos = 4)
plot(m3['rmse'],key.pos = 4)
library("mapview")
library("RColorBrewer")
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "YlGnBu")))
, vector.palette = colorRampPalette(brewer.pal(9, "PuBuGn"))
, na.color = "gray"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(m3)
m3
mapview(m3['r2'])
mapview(m3['r2'], title = "R2")
mapview(m3['r2'],layer.name= "R2")
mapshot(m3['r2'],layer.name= "R2")
a = mapview(m3['r2'],layer.name= "R2")
mapshot(a)
indices = CreateSpacetimeFolds(merged2,
spacevar = "grp",
timevar = NA,
k = 10,
class = NA,
seed = 1
rfGrid <-  expand.grid( mtry =20 )
indices = CreateSpacetimeFolds(merged2,
spacevar = "grp",
timevar = NA,
k = 10,
class = NA,
seed = 1
rfGrid <-  expand.grid( mtry =20 )
mapshot(a, file = "~/Documents/GitHub/uncertainty/data_vis_exp/R2map.png"))
mapshot(a, file = "~/Documents/GitHub/uncertainty/data_vis_exp/R2map.png")
mapshot(a, file = "~/Documents/GitHub/uncertainty/data_vis_exp/R2map.png")
mapshot(a, file = "~/Documents/GitHub/uncertainty/MLmodeling//R2map.png")
mapshot(a, file = "~/Documents/GitHub/uncertainty/MLmodeling/R2map.png")
mapshot(a, file = "~/Documents/GitHub/uncertainty/MLmodeling/R2map.png")
mapshot(a, file = paste0(getwd(), "/R2map.png")
mapshot(a, file = paste0(getwd(), "/R2map.png")
mapshot(a, file = paste0(getwd(), "/R2map.png"))
mapshot(a, file = paste0(getwd(), "/R2map.png"))
getwd()
a = mapview(m3['r2'],layer.name= "R2")
mapshot(a, file = paste0(getwd(), "/R2map.png"))
a
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "YlGnBu")))
, vector.palette = colorRampPalette(brewer.pal(9, "PuBuGn"))
, na.color = "gray"
, layers.control.pos = "topright"
, viewer.suppress = F # open browser
)
a = mapview(m3['r2'],layer.name= "R2")
mapshot(a, file = paste0(getwd(), "/R2map.png"))
a = mapview(m3['rmse'],layer.name= "R2")
a = mapview(m3['rmse'],layer.name= "Rmse")
mapview(m3['rmse'],layer.name= "Rmse")
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "YlGnBu")))
, vector.palette = colorRampPalette(brewer.pal(9, "PuBuGn"))
, na.color = "gray"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
a = mapview(m3['r2'],layer.name= "R2")
mapview(m3['rmse'],layer.name= "Rmse")
a = mapview(m3['r2'],layer.name= "R2")
a
mapview(m3['rmse'],layer.name= "RMSE")
xgb
merged2["value_mean"]
mapview(m3['rmse'],layer.name= "RMSE") + mapview(merged2["mean_value"], zcol = "founded")
mapview(m3['rmse'],layer.name= "RMSE") + mapview(merged2["mean_value"])
locations_sf
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"])
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"], layer.name= "NO2")
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"], layer.name= "NO2", cex = 0.3)
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"], layer.name= "NO2", cex = 0.9)
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"], layer.name= "NO2", cex = 3)
brewer.pal.info
display.brewer.all
display.brewer.pal()
display.brewer.all()
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "PiYG")))
, vector.palette = colorRampPalette(brewer.pal(9, "PuBuGn"))
, na.color = "gray"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"], layer.name= "NO2", cex = 3)
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "PiYG")))
, vector.palette = colorRampPalette(brewer.pal(9, "PuBuGn"))
, na.color = "gray"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"], layer.name= "NO2", cex = 3)
display.brewer.pal()
display.brewer.all()
a = mapview(m3['r2'],layer.name= "R2")
a
mapview(m3['rmse'],layer.name= "RMSE") + mapview(locations_sf["mean_value"], layer.name= "NO2", cex = 3)
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(9, "PiYG"))) + mapview(locations_sf["mean_value"], layer.name= "NO2", cex = 3)
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(9, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions =rev(brewer.pal(9, "PiYG")), layer.name= "NO2", cex = 3)
display.brewer.all()
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions =rev(brewer.pal(11, "Spectral")), layer.name= "NO2", cex = 3)
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions =rev(brewer.pal(11, "Spectral")), layer.name= "NO2", cex = 5)
display.brewer.all()
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions =rev(brewer.pal(11, "YIOrRd")), layer.name= "NO2", cex = 5)
display.brewer.all()
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions =rev(brewer.pal(11, "YlOrRd")), layer.name= "NO2", cex = 5)
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions = brewer.pal(11, "YlOrRd"), layer.name= "NO2", cex = 5)
mapview(m3['rmse'],layer.name= "RMSE",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions = brewer.pal(11, "YlOrRd"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "RMSE",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions = brewer.pal(11, "YlOrRd"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["mean_value"],col.regions = brewer.pal(11, "YlOrRd"), layer.name= "NO2", cex = 4)
locations_sf
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype"],col.regions = brewer.pal(11, "YlOrRd"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype"],col.regions = brewer.pal(3, "YlOrRd"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype"],col.regions = brewer.pal(3, "Set2"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype"],col.regions = brewer.pal(3, "Set3"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype"],col.regions = brewer.pal(3, "Set"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype"],col.regions = brewer.pal(3, "Set1"), layer.name= "NO2", cex = 4)
display.brewer.all()
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype"],col.regions = brewer.pal(3, "Accent"), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = brewer.pal(3, "Accent"), layer.name= "NO2", cex = 4)
grid1 = st_make_grid(locations_sf, 2) # 64 grids
grid1%>%plot
stc = st_join(st_sf(grid1), locations_sf,join=st_intersects )
stc$grp = sapply(st_equals(stc), max)
merged2 = na.omit(stc%>%dplyr::select(c(colnames(merged), grp)))
merged2$grp%>%unique()
m2 = data.frame(merged2)%>%dplyr::select(c(colnames(merged), 'grp'))%>%mutate(grp = as.factor(grp))
m2 = as.h2o(m2)
names(m2)
xgb  = h2o.xgboost(training_frame = m2,y = "mean_value",ntrees = 1000, eta =  0.007, subsample = 0.7, max_depth = 6, gamma = 5, reg_lambda =2, reg_alpha = 0, seed =1, fold_column="grp", keep_cross_validation_fold_assignment= TRUE,)
m3 = distinct(merged2)
xgbcv = xgb@model$cross_validation_metrics_summary%>%as.data.frame()%>%dplyr::select(-sd, -mean)
xgbcv = apply(t(xgbcv), 2, as.numeric)
plot(xgbcv[,4], ylim = c(0,1), typ = "l")
data.frame(xgbcv,h2o.cross_validation_fold_assignment(xgb))
xgbcv = xgb@model$cross_validation_metrics_summary%>%as.data.frame()%>%dplyr::select(-sd, -mean)
xgbcv = apply(t(xgbcv), 2, as.numeric)
plot(xgbcv[,4], ylim = c(0,1), typ = "l")
#data.frame(xgbcv,h2o.cross_validation_fold_assignment(xgb))
h2o.cross_validation_fold_assignment(xgb)
m3 = distinct(merged2)
m3$r2 = ifelse(xgbcv[,4]<0, 0, xgbcv[,4] )
m3$r2
m3$rmse= xgbcv[,6]
plot(m3['r2'],key.pos = 4)
plot(m3['rmse'],key.pos = 4)
library("mapview")
library("RColorBrewer")
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "PiYG")))
, vector.palette = colorRampPalette(brewer.pal(9, "PuBuGn"))
, na.color = "gray"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
a = mapview(m3['r2'],layer.name= "R2")
a
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = brewer.pal(3, "Accent"), layer.name= "NO2", cex = 4)
#mapshot(a, file = paste0(getwd(), "/R2map.png"))
r = raster("/Users/menglu/Downloads/mean_NLDE.tif")
display.brewer.all()
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(3, "Paired")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(3, "Paired")), layer.name= "NO2", cex = 4)
display.brewer.all()
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(9, "Paired")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(4, "Paired")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(3, "Paired")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(3, "Darked")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(3, "Darkened")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(3, "Dark")), layer.name= "NO2", cex = 4)
display.brewer.all()
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(3, "Dark2")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = rev(brewer.pal(1, "Dark2"),brewer.pal(1, "Dark2"),brewer.pal(1, "Dark2")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(1, "Dark2"),brewer.pal(1, "Dark2"),brewer.pal(1, "Dark2")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(1, "Paired"),brewer.pal(1, "Accent"),brewer.pal(1, "Dark2")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(1, "Paired"),brewer.pal(2, "Accent"),brewer.pal(1, "Dark2")), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(1, "Paired"),brewer.pal(4, "Accent"),brewer.pal(1, "Dark2")), layer.name= "NO2", cex = 4)
c(brewer.pal(1, "Paired"),brewer.pal(1, "Accent"),brewer.pal(1, "Dark2"))
c(brewer.pal(1, "Paired"),brewer.pal(1, "Accent"),brewer.pal(1, "Dark2"))
brewer.pal(1, "Dark2")
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(1, "Paired")[1],brewer.pal(1, "Accent")[1],brewer.pal(1, "Dark2")[1]), layer.name= "NO2", cex = 4)
c(brewer.pal(1, "Paired")[1],brewer.pal(1, "Accent")[1],brewer.pal(1, "Dark2")[1])
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(1, "Paired")[1],brewer.pal(1, "Accent")[1],brewer.pal(3, "Dark2")[1]), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(1, "Paired")[2],brewer.pal(1, "Accent")[1],brewer.pal(3, "Dark2")[1]), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(3, "Paired")[2],brewer.pal(1, "Accent")[1],brewer.pal(3, "Dark2")[1]), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(3, "Paired")[2],brewer.pal(3, "Accent")[1],brewer.pal(3, "Dark2")[1]), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(3, "Paired")[2],brewer.pal(3, "Accent")[1:2],brewer.pal(3, "Dark2")[1]), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(3, "Paired")[2],brewer.pal(3, "Accent")[1:3],brewer.pal(3, "Dark2")[1]), layer.name= "NO2", cex = 4)
mapview(m3['r2'],layer.name= "R2",col.regions =rev(brewer.pal(11, "PiYG"))) + mapview(locations_sf["urbantype_chara"],col.regions = c(brewer.pal(3, "Paired")[2],brewer.pal(3, "Accent")[1:2],brewer.pal(3, "Dark2")[1]), layer.name= "NO2", cex = 4)
xgb
m2 = data.frame(merged2)%>%dplyr::select(c(colnames(merged), 'grp'))%>%mutate(grp = as.factor(grp))
m2 = as.h2o(m2)
names(m2)
xgb  = h2o.randomForest(training_frame = m2,y = "mean_value",ntrees = 2000, seed =1, fold_column="grp", keep_cross_validation_fold_assignment= TRUE)
