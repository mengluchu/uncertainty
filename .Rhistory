df = data.frame(cbind(VLA,Vrf, V2))
rf_crossvali =  function(n,df, y_var) {
smp_size <- floor(0.8 * nrow(df))
set.seed(n)
training<- sample(seq_len(nrow(df)), size = smp_size)
test = seq_len(nrow(df))[-training]
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf = lapply(1:20, df = merged, y_var = y_var,rf_crossvali)
Vrf = data.frame(RF = rowMeans(data.frame(Vrf)))
Vrf
#server: combine
df = data.frame(cbind(VLA,Vrf, V2))
stargazer(df,summary = F, digits = 1)
stargazer(df,summary = F, digits = 2)
names(merged)
predicLA_RF_XGBtiles
r = raster("/Users/menglu/Documents/GitHub/uncertainty/mean_NLDE.tif")
library("stars")
library("raster")
r = raster("/Users/menglu/Documents/GitHub/uncertainty/mean_NLDE.tif")
library(dplyr)
library("mapview")
# GDAL version >= 3.1.0 | setting mapviewOptions(fgb = TRUE)
library("leafem")
library("leafgl")
library("leaflet")
library("sf")
# Linking to GEOS 3.8.0, GDAL 3.1.0, PROJ 7.0.0
library("stars")
library("raster")
library("RColorBrewer")
mapview(r)
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "Greys")))
, vector.palette = colorRampPalette(brewer.pal(9, "YlGnBu"))
, na.color = "magenta"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(r)
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "YlGnBu")))
, vector.palette = colorRampPalette(brewer.pal(9, "YlGnBu"))
, na.color = "magenta"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(r)
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "YlGnBu")))
, vector.palette = colorRampPalette(brewer.pal(9, "YlGnBu"))
#, na.color = "magenta"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(r)
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "YlGnBu")))
, vector.palette = colorRampPalette(brewer.pal(9, "YlGnBu"))
#, na.color = "magenta"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(r)
brewer.pal.info
?mapviewOptions
mapviewOptions(
basemaps = c("OpenStreetMap.Mapnik","Esri.OceanBasemap")
, raster.palette = colorRampPalette(rev(brewer.pal(9, "YlGnBu")))
, vector.palette = colorRampPalette(brewer.pal(9, "PuBuGn"))
, na.color = "gray"
, layers.control.pos = "topright"
, viewer.suppress = TRUE # open browser
)
mapview(r)
Lasso
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path=paste0('global_crossvali',"/"),
echo=F, warning=FALSE, message=FALSE, dev = "png", include = T)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE , repos='http://cran.muenster.r-project.org')
sapply(pkg, require, character.only = TRUE)
}
packages <- c( "devtools", "dplyr","data.table" , "ggplot2" , "RColorBrewer", "xgboost",  "glmnet", "ranger", "randomForest","tidyr" ,"tibble","stargazer")
ipak(packages)
install_github("mengluchu/APMtools")
library(APMtools)
if (resolution ==100)
if (resolution ==100)
{
merged = merged%>%select(-c(industry_25,industry_50,road_class_1_25,road_class_1_50,road_class_2_25,road_class_2_50,   road_class_3_25,road_class_3_50))
}
merged = read.csv("~/Documents/GitHub/uncertainty/DENL17_uc.csv")
resolution =100
y_var = "mean_value"
prestring =  "road|nightlight|population|temp|wind|trop|indu|elev|radi"
varstring = paste(prestring,y_var,sep="|")
merged = read.csv("~/Documents/GitHub/uncertainty/DENL17_uc.csv")
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path=paste0('global_crossvali',"/"),
echo=F, warning=FALSE, message=FALSE, dev = "png", include = T)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE , repos='http://cran.muenster.r-project.org')
sapply(pkg, require, character.only = TRUE)
}
packages <- c( "devtools", "dplyr","data.table" , "ggplot2" , "RColorBrewer", "xgboost",  "glmnet", "ranger", "randomForest","tidyr" ,"tibble","stargazer")
ipak(packages)
install_github("mengluchu/APMtools")
library(APMtools)
resolution =100
y_var = "mean_value"
prestring =  "road|nightlight|population|temp|wind|trop|indu|elev|radi"
varstring = paste(prestring,y_var,sep="|")
merged = read.csv("~/Documents/GitHub/uncertainty/DENL17_uc.csv")
merged = read.csv("~/Documents/GitHub/uncertainty/data_vis_exp/DENL17_uc.csv")
merged = merged%>%dplyr::select(matches(varstring))%>%  na.omit()
names(merged)
merged = read.csv("~/Documents/GitHub/uncertainty/data_vis_exp/DENL17_uc.csv")
names(merged)
merged$MeasurementType
merged$AirQualityStationType
merged$BuildingDistance
merged$KerbDistance
merged$AirQualityStationArea
merged$AirQualityStationArea%>%table
merged$AirQualityStationArea%>%table
merged$AirQualityStationType%>%table
merged$AirQualityStationArea%>%table
merged$AirQualityStationType%>%table
merged$wkd_day_value[merged$AirQualityStationType=="traffic"]
merged$wkd_day_value[merged$AirQualityStationType=="traffic"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="industry"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="industrial"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="traffic"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="industrial"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="traffic"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="traffic"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="industrial"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="industrial"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="industrial"]%>%summary
merged = read.csv("~/Documents/GitHub/uncertainty/data_vis_exp/DENL17_uc.csv")
merged$AirQualityStationArea%>%table
merged$AirQualityStationType%>%table
merged$wkd_day_value[merged$AirQualityStationType=="traffic"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_day_value[merged$AirQualityStationType=="industrial"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="traffic"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="background"]%>%summary
merged$wkd_night_value[merged$AirQualityStationType=="industrial"]%>%summary
merged%>%filter(AirQualityStationType=="traffic")%>%summary
merged%>%filter(AirQualityStationType=="traffic")%>%select(wkd_night_value)summary
merged%>%filter(AirQualityStationType=="traffic")%>%select(wkd_night_value)%>%summary
merged%>%filter(AirQualityStationType=="traffic")%>%dplyr::select(wkd_night_value)%>%summary
mergedall = read.csv("~/Documents/GitHub/uncertainty/data_vis_exp/DENL17_uc.csv")
mergedall$AirQualityStationArea%>%table
mergedall$AirQualityStationType%>%table
mergedall%>%filter(AirQualityStationType=="traffic")%>%dplyr::select(wkd_day_value)%>%summary
mergedall%>%filter(AirQualityStationType=="traffic")%>%dplyr::select(wkd_night_value)%>%summary
mergedall%>%filter(AirQualityStationType=="background")%>%dplyr::select(wkd_day_value)%>%summary
mergedall%>%filter(AirQualityStationType=="background")%>%dplyr::select(wkd_night_value)%>%summary
mergedall%>%filter(AirQualityStationType=="traffic")%>%dplyr::select(mean_value)%>%summary
mergedall%>%filter(AirQualityStationType=="traffic")%>%dplyr::select(wkd_day_value)%>%summary
mergedtraffic = mergedall%>%filter(AirQualityStationType=="traffic") %>%select(colnames(merged))
merged = read.csv("~/Documents/GitHub/uncertainty/data_vis_exp/DENL17_uc.csv")
merged = merged%>%dplyr::select(matches(varstring))%>%  na.omit()
names(merged)
mergedtraffic = mergedall%>%filter(AirQualityStationType=="traffic") %>%dplyr::select(colnames(merged))
head(mergedtraffic)
if (resolution ==100)
{
merged = merged%>%select(-c(industry_25,industry_50,road_class_1_25,road_class_1_50,road_class_2_25,road_class_2_50,   road_class_3_25,road_class_3_50))
}
if (resolution ==100)
{
merged = merged%>%dplyr::select(-c(industry_25,industry_50,road_class_1_25,road_class_1_50,road_class_2_25,road_class_2_50,   road_class_3_25,road_class_3_50))
}
names(merged)
mergedtraffic = mergedall%>%filter(AirQualityStationType=="traffic") %>%dplyr::select(colnames(merged))
head(mergedtraffic)
mergedtraffic = mergedall%>%filter(AirQualityStationType=="traffic") %>%dplyr::select(colnames(merged))
mergedbackground = mergedall%>%filter(AirQualityStationType=="background") %>%dplyr::select(colnames(merged))
traffic = mergedall%>%filter(AirQualityStationType=="traffic") %>%dplyr::select(colnames(merged))
background = mergedall%>%filter(AirQualityStationType=="background") %>%dplyr::select(colnames(merged))
indu = mergedall%>%filter(AirQualityStationType=="industrial") %>%dplyr::select(colnames(merged))
nrow(indu)
nrow(indu)+nrow(traffic)+nrow(background)
nrow(indu)+nrow(traffic)+nrow(background) == nrow(merged)
traffic = mergedall%>%filter(AirQualityStationType=="traffic") %>%dplyr::select(colnames(merged))
background = mergedall%>%filter(AirQualityStationType=="background") %>%dplyr::select(colnames(merged))
indu = mergedall%>%filter(AirQualityStationType=="industrial") %>%dplyr::select(colnames(merged))
assert nrow(indu)+nrow(traffic)+nrow(background) == nrow(merged)
assert (nrow(indu)+nrow(traffic)+nrow(background) == nrow(merged))
nrow(indu)+nrow(traffic)+nrow(background) == nrow(merged)
orderedall = rbind(traffic, background, indu)
head(orderedall)
tail(orderedall)
nrow(orderedall)
nrow(traffic)
nrow(background)
nrow(orderedall)
nrow(traffic)
?setdiff
setdiff(1:4, 2:9)
training<- setdiff(seq_len(nrow(df)), test)
df_type=traffic
sp3_traffic_rf_cv =  function(n, df_type=traffic, df=orderedall, y_var) {
test_size <-  #30 is about 20% of traffic
test = sample(df_type, size = test_size)
training<- setdiff(seq_len(nrow(df)), test)
test = seq_len(nrow(df))[-training]
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
test_size <-  #30 is about 20% of traffic
test = sample(df_type, size = test_size)
test_size <-  30 £is about 20% of traffic
test_size <-  30 #is about 20% of traffic
test_size <-  floor(0.2*nrow(df_type)) #is about 20% of traffic
test_size
test = sample(df_type, size = test_size)
test
test = sample(nrow(df_type), size = test_size)
test
training<- setdiff(seq_len(nrow(df)), test)
training
seq_len(nrow(df))
orderedall
nrow(df)
df=orderedall
nrow(df)
training<- setdiff(seq_len(nrow(df)), test)
training
sp3_traffic_rf_cv =  function(n, df_type , df , y_var) {
test_size <-  floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training<- setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,rf_crossvali)
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size <-  floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training<- setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size <-  floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training<- setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
#server: combine
Vrf_tra = lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
Vrf_b= lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
Vrf_b = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_b
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size <-  floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training<- setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
Vrf_b= lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
Vrf_b = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_b
#server: combine
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size <-  floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training<- setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
Vrf_b= lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
Vrf_b = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_b
#server: combine
Vrf_b
Vrf_tra
Vrf_b
Vrf_b = data.frame(RF = rowMeans(data.frame(Vrf_b)))
Vrf_b
Vrf_b= lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size <-  floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training<- setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path=paste0('global_crossvali',"/"),
echo=F, warning=FALSE, message=FALSE, dev = "png", include = T)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE , repos='http://cran.muenster.r-project.org')
sapply(pkg, require, character.only = TRUE)
}
packages <- c( "devtools", "dplyr","data.table" , "ggplot2" , "RColorBrewer", "xgboost",  "glmnet", "ranger", "randomForest","tidyr" ,"tibble","stargazer")
ipak(packages)
install_github("mengluchu/APMtools")
library(APMtools)
resolution =100
y_var = "mean_value"
prestring =  "road|nightlight|population|temp|wind|trop|indu|elev|radi"
varstring = paste(prestring,y_var,sep="|")
mergedall = read.csv("~/Documents/GitHub/uncertainty/data_vis_exp/DENL17_uc.csv")
mergedall$AirQualityStationArea%>%table
mergedall$AirQualityStationType%>%table
mergedall%>%filter(AirQualityStationType=="traffic")%>%dplyr::select(wkd_day_value)%>%summary
mergedall%>%filter(AirQualityStationType=="traffic")%>%dplyr::select(wkd_night_value)%>%summary
mergedall%>%filter(AirQualityStationType=="background")%>%dplyr::select(wkd_day_value)%>%summary
mergedall%>%filter(AirQualityStationType=="background")%>%dplyr::select(wkd_night_value)%>%summary
merged = mergedall%>%dplyr::select(matches(varstring))%>%  na.omit()
names(merged)
if (resolution ==100)
{
merged = merged%>%dplyr::select(-c(industry_25,industry_50,road_class_1_25,road_class_1_50,road_class_2_25,road_class_2_50,   road_class_3_25,road_class_3_50))
}
names(merged)
LA_imp =  function(n,df, y_var) {
smp_size <- floor(0.8 * nrow(df))
set.seed(n)
training<- sample(seq_len(nrow(df)), size = smp_size)
y_varname= y_var
grepstring =varstring
variabledf = df
prenres = paste(y_varname, "|", grepstring, sep = "")
pre_mat_all = subset_grep(variabledf, prenres)
pre_mat = pre_mat_all %>% dplyr::select(-y_varname)
pre_mat_tr = pre_mat[training, ]
y_tr_value = variabledf[training, y_varname]
cvfit <- glmnet::cv.glmnet(as.matrix(pre_mat_tr), y_tr_value,
type.measure = "mse", standardize = TRUE, alpha = 1,
lower.limit = 0)
Lassoselected(cvfit)
}
VLA = sapply(1:20, df = merged,   y_var = y_var, LA_imp)
a= table(do.call(c,VLA))
#a =a[a>=5]
a = a[order(a,decreasing = T)]
stargazer(data.frame(a),summary = F)
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size <-  floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training<- setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
Vrf_b= lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
Vrf_b = data.frame(RF = rowMeans(data.frame(Vrf_b)))
Vrf_b
#server: combine
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size =  30 #floor(0.2*nrow(df_type)) #30 is about 20% of traffic
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training = setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
Vrf_b= lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
Vrf_b = data.frame(RF = rowMeans(data.frame(Vrf_b)))
Vrf_b
#server: combine
sp3_rf_cv =  function(n, df_type , df , y_var) {
test_size =  30 #floor(0.2*nrow(df_type)) #30 is about 20% of traffic, use a consistent size about 7% of data
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training = setdiff(seq_len(nrow(df)), test)
rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vrf_tra = lapply(1:30, df =orderedall, df_type=traffic, y_var = y_var,sp3_rf_cv)
Vrf_tra = data.frame(RF = rowMeans(data.frame(Vrf_tra)))
Vrf_tra
Vrf_b= lapply(1:30, df =orderedall, df_type=background, y_var = y_var,sp3_rf_cv)
Vrf_b = data.frame(RF = rowMeans(data.frame(Vrf_b)))
Vrf_b
#server: combine
sp3_la_cv =  function(n, df_type , df , y_var) {
set.seed(n)
test_size =  30 #floor(0.2*nrow(df_type)) #30 is about 20% of traffic, use a consistent size about 7% of data
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training = setdiff(seq_len(nrow(df)), test)
Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vla_tra = lapply(1:30, df =orderedall, df_type=traffic, y_var = y_var,sp3_la_cv)
Vla_tra = data.frame(RF = rowMeans(data.frame(Vla_tra)))
Vla_tra
Vla_b= lapply(1:30, df =orderedall, df_type=background, y_var = y_var,sp3_la_cv)
Vla_b = data.frame(RF = rowMeans(data.frame(Vla_b)))
Vla_b
#server: combine
Vla_b
Vla_tra
Vla_b
sp3_la_cv =  function(n, df_type , df , y_var) {
set.seed(n)
test_size =  30 #floor(0.2*nrow(df_type)) #30 is about 20% of traffic, use a consistent size about 7% of data
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training = setdiff(seq_len(nrow(df)), test)
Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring)
}
Vla_tra = lapply(1:30, df =orderedall, df_type=traffic, y_var = y_var,sp3_la_cv)%>%data.frame()%>%rowMeans()
Vla_tra
Vla_b= lapply(1:30, df =orderedall, df_type=background, y_var = y_var,sp3_la_cv)%>%data.frame()%>%rowMeans()
Vla_b
#server: combine
Vla_tra
Vla_b
Vla_tra
Vla_b
sp3_cv =  function(n, df_type , df , y_var) {
set.seed(n)
test_size =  30 #floor(0.2*nrow(df_type)) #30 is about 20% of traffic, use a consistent size about 7% of data
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training = setdiff(seq_len(nrow(df)), test)
XGB = xgboost_LUR(df, y_varname= y_var, training=training, test=test, grepstring =varstring,  max_depth =6, gamma=5, eta =0.007, nrounds = 3000, xgb_lambda = 2, xgb_alpha = 0, subsample = 0.7)
RF = rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
LA = Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring, vis1 = F)
cbind( LA, RF, XGB)
}
sp_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var,sp3_la_cv)%>%data.frame()
sp_bg= lapply(1:20, df =orderedall, df_type=background, y_var = y_var,sp3_la_cv)%>%data.frame()
F1 = function(m, f=quote(summary), nvaria) {  apply(V3[, seq(m,ncol(V3), by =nvaria)], 1, f) }
nv = 3
meanvali = data.frame(sapply(1:nv, F1,  sp_tra, mean, nv))
sp_tra
meanvali = data.frame(sapply(1:nv, F1,  sp_tra, mean, nv))
nv = 3
meanvali = data.frame(sapply(1:nv, F1,  sp_tra, mean, nv))
F1 = function(m, f=quote(summary), nvaria) {  apply(V3[, seq(m,ncol(V3), by =nvaria)], 1, f) }
nv = 3
meanvali = data.frame(sapply(1:nv, F1,  sp_tra, mean, nv))
meanvali = data.frame(sapply(1:3, F1,  sp_tra, mean, 3))
meanvali = data.frame(sapply(1:3, F1, sp_tra, mean))
F1 = function(m, pre, f=quote(summary), nvaria) {apply(pre[, seq(m, ncol(pre), by =nvaria)], 1, f)}
meanvali = data.frame(sapply(1:nv, F1, sp_tra, mean,nv))
meanvali
cv_bg = data.frame(sapply(1:nv, F1, sp_bg, mean,nv))
names(cv_bg) = dimnames("XGB", "RF", "LA")
cv_bg
names(cv_bg) =  c("XGB", "RF", "LA")
cv_traffic= data.frame(sapply(1:nv, F1, sp_tra, mean,nv))
names(cv_traffic) = c("XGB", "RF", "LA")
cv_bg = data.frame(sapply(1:nv, F1, sp_bg, mean,nv))
names(cv_bg) =  c("XGB", "RF", "LA")
cv_traffic
cv_bg
cv_traffic= data.frame(sapply(1:nv, F1, sp_tra, mean,nv))
names(cv_traffic) = paste0(c("XGB", "RF", "LA"), "_tra")
cv_bg = data.frame(sapply(1:nv, F1, sp_bg, mean,nv))
names(cv_bg) =  paste0(c("XGB", "RF", "LA"),"bg")
cv_traffic
cv_bg
cv_traffic= data.frame(sapply(1:nv, F1, sp_tra, mean,nv))
names(cv_traffic) = paste0(c("XGB", "RF", "LA"), "_tra")
cv_bg = data.frame(sapply(1:nv, F1, sp_bg, mean,nv))
names(cv_bg) =  paste0(c("XGB", "RF", "LA"),"_bg")
cv_traffic
cv_bg
cbind(cv_traffic, cv_bg)
sp3_cv =  function(n, df_type , df , y_var) {
set.seed(n)
test_size =  30 #floor(0.2*nrow(df_type)) #30 is about 20% of traffic, use a consistent size about 7% of data
test = sample(nrow(df_type), size = test_size) # sample 20% from e.g. traffic and then use others as training
training = setdiff(seq_len(nrow(df)), test)
XGB = xgboost_LUR(df, y_varname= y_var, training=training, test=test, grepstring =varstring,  max_depth =6, gamma=5, eta =0.007, nrounds = 3000, xgb_lambda = 2, xgb_alpha = 0, subsample = 0.7)
RF = rf_LUR(df, numtrees =  1000, mtry = 34, vis1 = F,y_varname= y_var, training=training, test=test, grepstring =varstring)
LA = Lasso(df, y_varname= y_var, training=training, test=test, grepstring =varstring, vis1 = F)
cbind(LA,RF,XGB)
}
sp_tra = lapply(1:20, df =orderedall, df_type=traffic, y_var = y_var, sp3_cv)%>%data.frame()
sp_bg= lapply(1:20, df =orderedall, df_type=background, y_var = y_var, sp3_cv)%>%data.frame()
F1 = function(m, pre, f=quote(summary), nvaria) {apply(pre[, seq(m, ncol(pre), by =nvaria)], 1, f)}
nv = 3# number of algorithms.
cv_traffic= data.frame(sapply(1:nv, F1, sp_tra, mean,nv))
names(cv_traffic) = paste0(c("LA", "RF", "XGB"), "_tra")
cv_bg = data.frame(sapply(1:nv, F1, sp_bg, mean,nv))
names(cv_bg) =  paste0(c("LA", "RF", "XGB"),"_bg")
cbind(cv_traffic, cv_bg)
#server: combine
